Scenario 1 
---

What combination of parameters is producing the hit rate you observe? (Hint: Your answer should be of the form: "Because [parameter A] in bytes is exactly equal to [parameter B] in bytes.")

Because step size (a1) in bytes (32) is exactly equal to block size*number of blocks in bytes.

---

What is our hit rate if we increase Rep Count arbitrarily? Why?

No difference because every access is going into the same block.

---

How could we modify one program parameter to increase our hit rate? (Hint: Your answer should be of the form: "Change [parameter] to [value]." Note: we don't care if we access the same array elements. Just give us a program parameter modification that would increase the hit rate.

Change array size to 32


====

Scenario 2
---

How many memory accesses are there per iteration of the inner loop? (not the one involving repcount). It's not 1.

2

---

What is the repeating hit/miss pattern? WHY? (Hint: it repeats every 4 accesses).

Block size is 16 so 4 consecutive integers are loaded. Misses are every 4th memory access. miss (block load), hit (same location), hit (different offset in same block), hit

--

This should follow very straightforwardly from the above question: Explain the hit rate in terms of the hit/miss pattern.

3 hit per every miss. 75%

---

Keeping everything else the same, what happens to our hit rate as Rep Count goes to infinity? Why?

The entire array is in the cache at the end so hit rate will go to infinity as rep count goes to infinity.

---

You should have noticed that our hit rate was pretty high for this scenario, and your answer to the previous question should give you a good understanding of why. IF YOU ARE NOT SURE WHY, consider the size of the array and compare it to the size of the cache.

Now, consider the following:
Suppose we have a program that iterates through a very large array (AKA way bigger than the size of the cache) repcount times. 
During each Rep, we map a different function to the elements of our array (e.g. if Rep Count = 1024, we map 1024 different functions onto each of the array elements, one per Rep). 
(For reference, in this scenario, we just had one function (incrementation) and one Rep).

QUESTION: Given the program described above, how can we restructure its array accesses to achieve a hit rate like that achieved in this scenario? 
Assume that each array element is to be modified independently of the others AKA it doesn't matter if Rep k is applied to element arr[i] before Rep k is applied to element arr[i+1], etc.

we should try to access part of the array that fits in cache at a time and apply all of the rep functions to that part so we can be completely done with it before moving on, thereby keeping that part hot in the cache and not having to circle back to it later on! 